from polygon import RESTClient
from typing import cast
from urllib3 import HTTPResponse
from backtesting import Backtest, Strategy
from backtesting.lib import crossover
from backtesting.test import SMA
import pandas as pd
import json

api_key = 'your_api_key'

client = RESTClient(api_key)

# Fetch the data
aggs = cast(
    HTTPResponse,
    client.get_aggs(
        'AAPL',  # Fixed ticker symbol to 'AAPL'
        1,
        'minute',
        '2023-01-03',
        '2023-01-03',
        raw=True
    ),
)

poly_data = json.loads(aggs.data)
poly_data = poly_data['results']

# Check the length of the data to ensure full period coverage
print(f"Number of data points fetched: {len(poly_data)}")

# Prepare the data for DataFrame
dates = []
open_prices = []
high_prices = []
low_prices = []
close_prices = []
volumes = []

for bar in poly_data:
    dates.append(pd.Timestamp(bar['t'], tz='GMT', unit='ms'))
    open_prices.append(bar['o'])
    high_prices.append(bar['h'])
    low_prices.append(bar['l'])
    close_prices.append(bar['c'])
    volumes.append(bar['v'])

data = {
    'Open': open_prices,
    'High': high_prices,
    'Low': low_prices,
    'Close': close_prices,
    'Volume': volumes
}

dataFrame = pd.DataFrame(data, index=dates)

# Ensure the DataFrame index is a DatetimeIndex
dataFrame.index = pd.to_datetime(dataFrame.index)

# Check the date range to ensure it covers the expected period
print(f"Data start date: {dataFrame.index.min()}")
print(f"Data end date: {dataFrame.index.max()}")

class TutorialSMACross(Strategy):
    def init(self):
        price = self.data.Close
        self.sma1 = self.I(SMA, price, 20)
        self.sma2 = self.I(SMA, price, 36)

    def next(self):
        if crossover(self.sma1, self.sma2):
            self.buy()
        elif crossover(self.sma2, self.sma1):
            self.sell()

# Run the backtest
bt = Backtest(dataFrame, TutorialSMACross, cash=5000, commission=0.000005, exclusive_orders=True)
stats = bt.run()
bt.plot()

# Print stats to debug the backtest results
print(stats)


